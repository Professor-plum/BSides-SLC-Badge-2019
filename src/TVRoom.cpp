#include "TVRoom.h"
#include "FlashReader.h"

const int ecx = TVx + 48;
const int ecy = TVy - 10;
const int poses[5][2] = {{48, 13}, {43, 25}, {35, 35}, {25, 43}, {13, 48}}; 

//Clear text: Transmit on channel five no boost but amp and filter are needed disable feedback medium bitrate and center balance finally use the mixer and mono output
//Cipher text: Yfrtgfbx bs qygbgxp snjv tc uhsfy plz ofi eai tzrhxk eej bvkrxw hvxosrs yxiqgotq axwmhr pzzftmi nsr tkbmxv ofzrtqx ymafzce ilx xuj azdsk trq rceu cnmthy
//Key: forgotten
//conversion url: https://manytools.org/hacker-tools/image-to-byte-array/
const uint8_t qrcode[] PROGMEM = { 
0x3f, 0x86, 0x85, 0x17, 0xd2, 0xfe, 0x20, 0xb0, 0x4f, 0x68, 0x54, 0x82, 0x2e, 0x83, 0xc0, 
0x6, 0xb4, 0xba, 0x2e, 0xa9, 0x3a, 0xb0, 0x86, 0xba, 0x2e, 0x85, 0x97, 0xf1, 0xae, 0xba, 
0x20, 0xac, 0x22, 0x2a, 0x50, 0x82, 0x3f, 0xaa, 0xaa, 0xaa, 0xaa, 0xfe, 0x0, 0x17, 0xb2, 
0x2e, 0x72, 0x0, 0x3e, 0xef, 0x6b, 0xf0, 0xd5, 0x54, 0x1e, 0x6, 0xc1, 0x83, 0x96, 0x2e, 
0x3f, 0xf4, 0x1f, 0x2b, 0x1a, 0xcc, 0x3b, 0x76, 0x84, 0x37, 0x68, 0x3a, 0x36, 0xb7, 0x78, 
0x89, 0x58, 0x0, 0x1, 0x23, 0x85, 0xd1, 0x83, 0x5a, 0x29, 0x9f, 0xcb, 0x7e, 0x2f, 0xc8, 
0x16, 0x4e, 0xe8, 0x6, 0xb0, 0x3c, 0x1b, 0x8d, 0x3a, 0x81, 0x14, 0x0, 0x6, 0x18, 0x93, 
0xd5, 0xe7, 0x6e, 0x19, 0xd2, 0x3, 0x6c, 0xd, 0xdc, 0x3a, 0x37, 0x94, 0x2b, 0xf6, 0xfa, 
0x33, 0xf8, 0x3b, 0xe8, 0x4b, 0xf4, 0x2, 0x3a, 0x96, 0x35, 0xc6, 0x3e, 0x32, 0xbb, 0xfa, 
0xad, 0x6e, 0xb4, 0x2, 0x35, 0xe, 0x37, 0xb2, 0x38, 0x2b, 0xe7, 0x7b, 0xf4, 0x4f, 0xe4, 
0x2d, 0x53, 0x97, 0xd7, 0x80, 0xc2, 0x3e, 0xfe, 0x2a, 0x4f, 0x5f, 0x6c, 0x36, 0x2, 0x42, 
0x66, 0x35, 0xdc, 0x3e, 0xf9, 0x3a, 0x3c, 0x5a, 0x72, 0x33, 0x77, 0x97, 0xf5, 0xb7, 0x1e, 
0x14, 0xbf, 0x4b, 0x8f, 0x1b, 0x44, 0x2a, 0x6a, 0x60, 0xe2, 0x6d, 0xde, 0x38, 0xdb, 0x79, 
0x71, 0xda, 0xa6, 0xa, 0x44, 0x97, 0x94, 0x80, 0x9c, 0x2, 0xb8, 0xe3, 0xca, 0x1b, 0x54, 
0x1e, 0x4d, 0x4b, 0xf2, 0xb4, 0xf8, 0x26, 0xed, 0x7b, 0xf0, 0x53, 0xe2, 0x0, 0x2f, 0x92, 
0x21, 0xe6, 0x2a, 0x3f, 0xae, 0xce, 0xad, 0x2e, 0xa4, 0x20, 0x90, 0x5e, 0x2e, 0xbe, 0x3e, 
0x2e, 0xb3, 0x2b, 0xf0, 0x9b, 0xf4, 0x2e, 0xb3, 0x81, 0x25, 0xa4, 0xf4, 0x2e, 0xae, 0xd9, 
0xad, 0x4f, 0x5a, 0x20, 0xb0, 0x53, 0x3, 0xa1, 0x58, 0x3f, 0xb9, 0x6d, 0x60, 0xd6, 0xe4, 
 };

void TVRoom::refresh(Adafruit_ILI9341_STM *tft, unsigned long now){
  FR.blt("tv.raw", tft, 0, 0, 240, 320);
  out = false;
}

roomID TVRoom::update(Adafruit_ILI9341_STM *tft, unsigned long now){
  if ((ears[0] == 1) && (ears[1] == 2)) {//10:07
    wheel_set(C_TV, true);
    tft->fillRect(TVx, TVy, 8, 48, ILI9341_WHITE);
    tft->fillRect(TVx+56, TVy, 8, 48, ILI9341_WHITE);
    tft->fillRect(TVx+8, TVy, 40, 2, ILI9341_WHITE);
    tft->fillRect(TVx+8, TVy+46, 40, 2, ILI9341_WHITE);
    tft->drawBitmap(TVx+8, TVy+1, qrcode, 48, 45, ILI9341_BLACK, ILI9341_WHITE);
  }
  else {
    uint8_t noise[384];
    for (int i=0; i< sizeof(noise); ++i)
      noise[i] = random(256);
    tft->drawBitmap(TVx, TVy, noise, 64, 48, ILI9341_BLACK, ILI9341_WHITE);
  }
  //tft->fillRect(ecx-48, ecy-48, 96, 48, tft->color565(165, 187, 116));
  FR.blt("tvback.raw", tft, ecx-48, ecy-48, 96, 48);
  tft->drawLine(ecx, ecy, ecx - poses[ears[0]][0], ecy - poses[ears[0]][1], ILI9341_DARKGREY);
  tft->drawLine(ecx, ecy, ecx + poses[ears[1]][0], ecy - poses[ears[1]][1], ILI9341_DARKGREY);

  if ((now % 1000) < 500)
    FR.blt("tvt.raw", tft, 13, 215, 14, 4);
  else
    tft->fillRect(13, 215, 14, 4, tft->color565(33, 33, 33));
  if (out) return R_MARKET;
  return R_NOCHANGE;
}
  
void TVRoom::touchDown(int x, int y) {
  if ((x > 208) && (y > 65))
    out = true;
  touchMove(x,y);
}
 
void TVRoom::touchMove(int x, int y) {
  if ((x>=TVx) && (x< (TVx + 96)) && (y > (ecy - 60)) && (y < ecy)) {
    int slope = 10*(x-ecx)/(y-ecy);
    if (slope < -20) ears[1]=0;
    else if (slope < -13) ears[1]=1;
    else if (slope < -8) ears[1]=2;
    else if (slope < -4) ears[1]=3;
    else if (slope < -1) ears[1]=4;
    else if (slope > 20) ears[0]=0;
    else if (slope > 13) ears[0]=1;
    else if (slope > 8) ears[0]=2;
    else if (slope > 4) ears[0]=3;
    else if (slope > 1) ears[0]=4;
  }
}


