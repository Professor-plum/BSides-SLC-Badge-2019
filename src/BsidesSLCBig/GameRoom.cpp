#include "GameRoom.h"
#include <LedWheel.h>
#include <Fonts/nes.h>

const uint16_t baddiesBlt[10][160] = {
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0xf, 0xf, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0xf, 0xf, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x0, 0x0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x0, 0x0, 0x0},
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x3ef, 0x3ef, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x3ef, 0x3ef, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ef, 0x3ef, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x0, 0x7800, 0x7800, 0x0, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x0, 0x7800, 0x7800, 0x0, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x7800, 0x7800, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x7800, 0x0, 0x0, 0x7800, 0x0, 0x7800, 0x0, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x780f, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x780f, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0 },
  { 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x780f, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x0, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780f, 0x780f, 0x0, 0x0, 0x780f, 0x780f, 0x0, 0x0, 0x0, 0x0, 0x0 }
};


const uint8_t _ship[] = {0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x1, 0xc0, 
0x0, 0x0, 0x9, 0xc8, 0x0, 0x0, 0x9, 0xc8, 0x0, 0x0, 0xb, 0xe8, 0x0, 0x0, 0x4f, 
0xf9, 0x0, 0x0, 0x4f, 0xf9, 0x0, 0x0, 0x4f, 0xf9, 0x0, 0x0, 0x5f, 0xfd, 0x0, 0x0, 
0x7f, 0xff, 0x0, 0x0, 0x77, 0xf7, 0x0, 0x0, 0x66, 0xb3, 0x0, 0x0, 0x40, 0x81, 0x0};

const uint8_t _exit[] = { 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x3, 0xe0, 
0x0, 0x83, 0xe0, 0x1, 0x83, 0xe0, 0x3, 0x87, 0xe0, 0x7, 0xff, 0xe0, 0xf, 0xff, 0xc0, 
0x1f, 0xff, 0xc0, 0xf, 0xff, 0x80, 0x7, 0xfe, 0x0, 0x3, 0x80, 0x0, 0x1, 0x80, 0x0, 
0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x38, 0xc6, 0x48, 0x25, 0x29, 0x50, 0x39, 0xe8, 0x60, 
0x25, 0x29, 0x50, 0x39, 0x26, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
 };

void GameRoom::reset() {
  _startTime = millis();
  _lastUpdate = millis();
  _lives = 3;
  _playerX = 120;
  _targetX = _playerX;
  _pIdx = _bIdx = 0;
  _shooting = false;
  _lastShot = 0;
  _bshot=0;
  _bx = 0;
  _by = 0;
  _right = true;
  dropped = false;
  n = R_NOCHANGE;
  for (int i=0; i<10; ++i)
    for(int j=0; j<5; ++j)
      _baddies[i][j] = true;
  _baddieShot[0] = 0;
  _baddieShot[1] = 400;
  for (int i=0; i<6; ++i)
    for (int j=0; j< 2; ++j) {
      _playerShots[i][j] = -1;
    }
}

void GameRoom::refresh(Adafruit_ILI9341_STM *tft, unsigned long now) {
  tft->fillScreen(ILI9341_BLACK);
  _drawLives = true;
  update(tft, now);
}
  
roomID GameRoom::update(Adafruit_ILI9341_STM *tft, unsigned long now) {
  if (now > (_lastUpdate + 5000)) {
    tft->fillScreen(ILI9341_BLACK);
    reset();
  }

  if ((now - _lastUpdate) < 33)
    return n;
  _lastUpdate += 33;

  //if ((now % 10000) < 100) tft->fillScreen(ILI9341_BLACK); //garbage collect

  tft->drawFastHLine(0, 303, 240, ILI9341_LIGHTGREY);
  tft->drawFastHLine(0, 304, 240, ILI9341_BLACK);
  tft->drawFastHLine(0, 319, 240, ILI9341_BLACK);
  tft->fillRect(0, 0, 320, 2, ILI9341_BLACK);
    

  if (_drawLives) {
    for(int i=0; i< 9; ++i) {
      if (i< _lives)
        tft->drawBitmap(200 - (i*32), 305, _ship, 32, 15, ILI9341_DARKGREY, ILI9341_BLACK);
      else
        tft->fillRect(200 - (i*32), 305, 32, 15, ILI9341_BLACK);
    }
    tft->drawBitmap(4, 304, _exit, 24, 24, ILI9341_WHITE, ILI9341_BLACK);
    _drawLives=false;
  }

  if (now < (_startTime + 2500)) { //Ready screen 
    tft->setCursor(90, 150);
    tft->setFont(&Pixel_NES5pt7b);
    tft->setTextColor(ILI9341_WHITE);
    tft->fillRect(80, 135, 80, 32, ILI9341_BLACK);
    tft->print("Ready");
  }
  else if (now < (_startTime + 3000)) { //Ready screen 
    tft->fillRect(80, 135, 80, 16, ILI9341_BLACK);
  }
  else if (isWon()) {  // You Won!
    tft->fillRect(80, 150, 140, 20, ILI9341_BLACK);
    tft->setCursor(90, 150);
    tft->setFont(&Pixel_NES5pt7b);
    tft->setTextColor(ILI9341_WHITE);
    tft->print("You Won!");
    wheel_set(C_GAME, true);
  }
  else if (_lives < 0) { //Game Over
    tft->fillRect(80, 150, 140, 20, ILI9341_BLACK);
    tft->setCursor(90, 150);
    tft->setFont(&Pixel_NES5pt7b);
    tft->setTextColor(ILI9341_WHITE);
    tft->print("Game Over");
  }
  else {
    doLogic(tft, now);

    int z = (now/1000) %2;

    //tft->fillRect(0, _by-2, 240, 120, ILI9341_BLACK);
    for(int j=0; j<5; ++j) {
      if (dropped)
        tft->fillRect(_bx, _by + j*12, 160, 2, ILI9341_BLACK);
      for (int i=0; i<10; ++i) {
        if (_baddies[i][j]) {
          tft->setAddrWindow(_bx + i*16, _by + 2 + j*12, _bx + i*16 + 15, _by + 9 + j*12);
          tft->pushColors((void*)baddiesBlt[2*j + z], 16*8);
          //tft->fillRect(_bx + i*16, _by + 2 + j*12, 16, 8, ILI9341_WHITE);
          //tft->drawBitmap(_bx + i*16, _by + 2 + j*12, baddiesBit[2*j + z], 16, 8, _colors[j], ILI9341_BLACK);
        }    
      }
    }
    dropped = false;

    for (int i=0; i<6; ++i)
      if (_playerShots[i][0] != -1) {
          tft->drawFastVLine(_playerShots[i][0], _playerShots[i][1]+8, 8, ILI9341_BLACK);
          tft->drawFastVLine(_playerShots[i][0], _playerShots[i][1], 8, ILI9341_YELLOW);
      }

    tft->drawBitmap(_playerX-8, 287, _ship, 32, 15, ILI9341_DARKGREY, ILI9341_BLACK);

    if (_baddieShot[1] < 300) {
      tft->fillRect(_baddieShot[0], _baddieShot[1]-8, 2, 8, ILI9341_BLACK);
      tft->fillRect(_baddieShot[0], _baddieShot[1], 2, 8, ILI9341_CYAN);
    }
    
  }
  return n;
}
  
void GameRoom::touchDown(int x, int y) {
  _targetX = x;
  _shooting = true;
  if ((x<30) && (y>304))
    n = R_ARCADE;
}

void GameRoom::touchMove(int x, int y) {
  _targetX = x;
}

void GameRoom::touchUp(int x, int y) {
  _shooting = false;
  _targetX = _playerX;
}

bool GameRoom::isWon() {
  if (_lives < 0)
    return false;
  for (int i=0; i<10; ++i)
    for (int j=0; j<5; ++j)
      if (_baddies[i][j])
        return false;
  return true;
}
    
void GameRoom::doLogic(Adafruit_ILI9341_STM *tft, uint32_t now) {

  int diff = _targetX - _playerX;
  _playerX += constrain(diff, -4, 4);

  _baddieShot[1] += 6;
  if (hit(_baddieShot[0]+2, _baddieShot[1], 3, 7, _playerX, 287, 16, 16)) {
    _lives--;
    _drawLives = true;
    tft->fillCircle(_playerX+8, 286, 8, ILI9341_ORANGE);
    delay(10);
    tft->fillRect(_playerX-8, 270, 32, 32, ILI9341_BLACK);
    wavPlay("die.wav");
    //TODO: invuln period
    _baddieShot[1]=400;
  }
       
    
  for (int i=0; i<6; ++i)
    if (_playerShots[i][0] > -1) {
      _playerShots[i][1] -= 6;
      if (_playerShots[i][1] < -16)
        _playerShots[i][0] = -1;      
    }

  if (_baddieShot[1] >= 287) {
      tft->fillRect(_baddieShot[0], 282, 2, 20, ILI9341_BLACK);
      _baddieShot[1] = 400;
      if ((now - _bshot) > 1000) {
        int i = random(10);
        _baddieShot[0] = _bx + i*16 + 6;
        for (int j = 0; j<5; ++j)
          if (_baddies[i][j]) {
            _baddieShot[1] = _by + (j+1)*12;
            _bshot = now;
          }
       }
  }

  
  if ((_by % 8) != 0) {_by += 2; dropped = true;}
  else if (_right) {
    if (_bx >= 80) {
      _right = false;
      _by += 2;
      dropped = true;
    }
    else 
      _bx += 2;
  }
  else {
    if (_bx <= 0) {
      _right = true;
      _by += 2;
      dropped = true;
    }
    else 
      _bx -= 2;
  }

  if (_by > 256) _lives=-1;

  
  if ((_shooting) && (now > (_lastShot + 600))) {
    _lastShot = now;
    _playerShots[_pIdx][0] = _playerX + 8;
    _playerShots[_pIdx++][1] = 286;
    wavPlay("shoot.wav");
    _pIdx %= 6;
  }
  
  for (int i=0; i<10; ++i)
    for (int j=0; j<5; ++j) 
      if (_baddies[i][j])
        for (int k=0; k<6; ++k) 
          if (hit(_playerShots[k][0], _playerShots[k][1], 1, 8, _bx + i*16 + 2, _by + j*12 +2, 10, 6)) {
            tft->fillCircle(_bx + i*16 + 7, _by + j*12 +5, 3, ILI9341_ORANGE);
            tft->fillRect(_bx + i*16, _by + j*12, 16, 22, ILI9341_BLACK);
            _baddies[i][j] = false;
            _playerShots[k][0] = -1;
            wavPlay("killed.wav");
          }

  for (int i=0; i<10; ++i)
    for (int j=0; j<5; ++j)
      if (_baddies[i][j])
        if (hit(_playerX, 287, 16, 16, _bx + i*16 + 2, _by + j*12 +2, 10, 6)) {
          tft->fillCircle(_playerX+8, 286, 8, ILI9341_ORANGE);
          delay(10);
          tft->fillRect(_playerX-8, 270, 32, 32, ILI9341_BLACK);
          _lives--;
          wavPlay("die.wav");
          _baddies[i][j] = false;
          _drawLives=true;
          //TODO: invuln period
        }
}


bool GameRoom::hit(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2) {
  if ((x1 + w1) < x2) return false;
  if ((x2 + w2) < x1) return false;
  if ((y1 + h1) < y2) return false;
  if ((y2 + h2) < y1) return false;
  return true;
}


